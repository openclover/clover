<project basedir="." name="">
    <!-- The ${project.dir} and ${repkg.clover.jar} property must be provided -->

    <taskdef name="clover-instr" classname="org.openclover.ant.tasks.CloverInstrTask"/>
    <taskdef name="clover-report" classname="org.openclover.ant.tasks.CloverReportTask"/>

    <!-- Properties common for all test cases -->
    <property name="build.dir" location="${project.dir}/tests-functional/target/it/clover-setup-growable"/>
    <property name="foo.source.file" location="${build.dir}/Foo.java"/>
    <property name="hoo.source.file" location="${build.dir}/Hoo.java"/>
    <property name="footest.source.file" location="${build.dir}/FooTest.java"/>
    <property name="reader.source.file" location="${build.dir}/PipeReader.java"/>

    <macrodef name="generate-source-files">
        <attribute name="pipeName"/>
        <sequential>
            <!-- helper class for simple inter-process communication -->
            <echo file="${reader.source.file}"><![CDATA[
import java.io.*;
public class PipeReader {
    public static File pipe = new File(System.getProperty("java.io.tmpdir"), "@{pipeName}");
    public static void deletePipe() {
        pipe.delete();
        System.out.println("GROWABLE pipe deleted");
    }
    public static void sendKey(int ch) throws IOException, InterruptedException {
        FileOutputStream fos = new FileOutputStream(pipe);
        fos.write(ch);
        fos.close();
        System.out.println("GROWABLE sendKey pipe closed");
        int i = 0;
        while (pipe.isFile()) {
            Thread.sleep(10);
            i++;
            System.out.println("GROWABLE sendKey i=" + i);
            if (i>1000) throw new InterruptedException("sendKey timeout!");
        }
    }
    public static int readKey() throws IOException, InterruptedException {
        int i = 0;
        while (!pipe.isFile()) {
            Thread.sleep(10);
            i++;
            System.out.println("GROWABLE readKey i=" + i);
            if (i>1000) throw new InterruptedException("readKey timeout!");
        }
        FileInputStream fos = new FileInputStream(pipe);
        int ch = fos.read();
        fos.close();
        System.out.println("GROWABLE readKey pipe closed");
        pipe.delete();
        return ch;
    }
}
]]></echo>

            <!-- an application class -->
            <echo file="${foo.source.file}"><![CDATA[
public class Foo {
    public void foo() {
        System.out.println("Say foo");
    }
    public void notTested() {
        System.out.println("Not called");
    }
    public void goo() {
        System.out.println("Say goo");
    }
    public static void main(String[] args) throws java.io.IOException, InterruptedException {
        int ch;
        new Hoo().hoo(); // force load of another coverage recorder instance
        do {
            ch = PipeReader.readKey(); // will block
            if (ch == 'f') {
                new Foo().foo();
            } else if (ch == 'g') {
                new Foo().goo();
            }
        } while (ch != 'z');
    }
}
]]></echo>

            <echo file="${hoo.source.file}"><![CDATA[
public class Hoo {
    public void hoo() {
        System.out.println("Ho ho ho");
    }
}
]]></echo>

            <!-- test class -->
            <echo file="${footest.source.file}"><![CDATA[
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import java.io.IOException;
public class FooTest {
    @Test public void testFoo() throws IOException, InterruptedException {
        PipeReader.sendKey('f');
    }
    public int notATestMethod() {
        return 0;
    }
    @Test public void testGoo() throws IOException, InterruptedException {
        PipeReader.sendKey('g');
    }
    @BeforeClass public static void classSetUp() throws IOException {
        PipeReader.deletePipe();
        new Hoo().hoo(); // force load of another coverage recorder instance
    }
    @AfterClass public static void classTearDown() throws IOException, InterruptedException {
        PipeReader.sendKey('z');
    }
}
]]></echo>
        </sequential>
    </macrodef>

    <!-- Properties different for each test case -->
    <macrodef name="set-testcase-properties">
        <attribute name="testcase"/>
        <sequential>
            <property name="build.instr.dir" location="${build.dir}/@{testcase}/instr" description="instrumented sources"/>
            <property name="build.classes.dir" location="${build.dir}/@{testcase}/classes" description="compiled classes"/>
            <property name="build.clover.dir" location="${build.dir}/@{testcase}/clover" description="clover database and coverage files"/>
            <property name="clover.db" location="${build.clover.dir}/clover.db"/>
            <property name="clover.xml.file" location="${build.clover.dir}/clover.xml"/>

            <path id="runtime.classpath">
                <pathelement location="${build.classes.dir}"/>
                <pathelement location="${project.dir}/clover-all/target/clover-${clover-ant.test.clover.ver}.jar"/> <!-- normal version -->
                <pathelement location="${repkg.clover.jar}"/> <!-- repackaged version -->
                <pathelement location="${project.dir}/tests-functional/target/test-dependencies/hamcrest-core-${clover-ant.test.hamcrest.ver}.jar"/>
            </path>

            <echo message="A @{testcase} test case runtime.classpath=${toString:runtime.classpath}"/>
        </sequential>
    </macrodef>

    <macrodef name="make-testcase-dirs">
        <sequential>
            <delete dir="${build.classes.dir}"/>
            <delete dir="${build.clover.dir}"/>
            <mkdir dir="${build.classes.dir}"/>
            <mkdir dir="${build.clover.dir}"/>
        </sequential>
    </macrodef>

    <!-- Compile test code -->
    <macrodef name="run-javac">
        <sequential>
            <javac srcdir="${build.instr.dir}" destdir="${build.classes.dir}" includes="*.java"/>
        </sequential>
    </macrodef>

    <!-- Execute test code -->
    <macrodef name="run-junit">
        <attribute name="runNumber"/>
        <attribute name="jvmarg" default="-Dsome.default.value=true"/>
        <sequential>
            <parallel>
                <!-- start clover.server -->
                <junit fork="true" showoutput="true">
                    <jvmarg value="-Dclover.logging.level=debug"/>
                    <jvmarg value="-Dclover.server=true"/>
                    <formatter type="plain"/>
                    <test name="FooTest" todir="${build.classes.dir}"/>
                    <classpath refid="runtime.classpath"/>
                </junit>
                <!-- start clover.client -->
                <sequential>
                    <sleep seconds="1"/>
                    <java fork="true" classname="Foo" outputproperty="java.out.@{runNumber}" errorproperty="java.err.@{runNumber}">
                        <jvmarg value="-Dclover.logging.level=debug"/>
                        <classpath refid="runtime.classpath"/>
                    </java>
                </sequential>
            </parallel>
        </sequential>
    </macrodef>

    <macrodef name="generate-reports">
        <sequential>
            <clover-report initstring="${clover.db}">
                <current outfile="${clover.xml.file}">
                    <format type="xml"/>
                </current>
                <current outfile="${build.clover.dir}">
                    <format type="html"/>
                </current>
            </clover-report>
        </sequential>
    </macrodef>

    <target name="instr-foo">
        <clover-instr initstring="${clover.db}" destdir="${build.instr.dir}">
            <fileset dir="${build.dir}" includes="Foo.java"/>
            <profiles>
                <profile name="default" coverageRecorder="growable"/>
            </profiles>
        </clover-instr>
    </target>

    <target name="instr-hoo">
        <clover-instr initstring="${clover.db}" destdir="${build.instr.dir}">
            <fileset dir="${build.dir}" includes="Hoo.java"/>
            <profiles>
                <profile name="default" coverageRecorder="growable"/>
            </profiles>
        </clover-instr>
    </target>

    <target name="instr-footest">
        <clover-instr initstring="${clover.db}" destdir="${build.instr.dir}">
            <fileset dir="${build.dir}" includes="FooTest.java"/>
            <profiles>
                <profile name="default" coverageRecorder="growable"/>
            </profiles>
        </clover-instr>
    </target>

    <target name="instr-foo-distr">
        <clover-instr initstring="${clover.db}" destdir="${build.instr.dir}">
            <fileset dir="${build.dir}" includes="Foo.java"/>
            <profiles>
                <profile name="default" coverageRecorder="growable">
                    <distributedCoverage name="execute-growable-distributed" host="127.0.0.1" numClients="1"/>
                </profile>
            </profiles>
        </clover-instr>
    </target>

    <target name="instr-hoo-distr">
        <clover-instr initstring="${clover.db}" destdir="${build.instr.dir}">
            <fileset dir="${build.dir}" includes="Hoo.java"/>
            <profiles>
                <profile name="default" coverageRecorder="growable">
                    <distributedCoverage name="execute-growable-distributed" host="127.0.0.1" numClients="1"/>
                </profile>
            </profiles>
        </clover-instr>
    </target>

    <target name="instr-footest-distr">
        <clover-instr initstring="${clover.db}" destdir="${build.instr.dir}">
            <fileset dir="${build.dir}" includes="FooTest.java"/>
            <profiles>
                <profile name="default" coverageRecorder="growable">
                    <distributedCoverage name="execute-growable-distributed" host="127.0.0.1" numClients="1"/>
                </profile>
            </profiles>
        </clover-instr>
    </target>

    <target name="execute-growable">
        <set-testcase-properties testcase="execute-growable"/>
        <generate-source-files pipeName="clover-setup-growable.pipe"/>
        <make-testcase-dirs/>
        <!-- We instrument each file separately because having includes="*.java" causes that files are be instrumented
        in random order, thus randomly failing "globalSliceStart()" assertion in JUnit test. Using <antcall> to make
        sure that Clover's references will not persist so that we have true instrumentation sessions.  -->
        <antcall target="instr-foo"/>
        <antcall target="instr-hoo"/>
        <antcall target="instr-footest"/>
        <copy file="${reader.source.file}" todir="${build.instr.dir}"/>

        <run-javac/>
        <run-junit runNumber="0"/>
        <generate-reports/>
    </target>

    <target name="execute-growable-distributed">
        <set-testcase-properties testcase="execute-growable-distributed"/>
        <generate-source-files pipeName="clover-setup-growable-distributed.pipe"/>
        <make-testcase-dirs/>
        <!-- We instrument each file separately because having includes="*.java" causes that files are be instrumented
        in random order, thus randomly failing "globalSliceStart()" assertion in JUnit test. Using <antcall> to make
        sure that Clover's references will not persist so that we have true instrumentation sessions -->
        <antcall target="instr-foo-distr"/>
        <antcall target="instr-hoo-distr"/>
        <antcall target="instr-footest-distr"/>
        <copy file="${reader.source.file}" todir="${build.instr.dir}"/>

        <run-javac/>
        <run-junit runNumber="1" jvmarg="-Dclover.server=true"/>
        <generate-reports/>
    </target>

    <target name="setUp">
        <echo message="project.dir=${project.dir}"/>
        <echo message="repkg.clover.jar=${repkg.clover.jar}"/>

        <fail unless="project.dir"
              message="The project.dir pointing to OpenClover workspace root directory must be provided."/>
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="tearDown">

    </target>

</project>
