<?xml version="1.0" encoding="utf-8"?>
<project basedir="" default="" name="clover-report">

    <taskdef name="clover-clean" classname="org.openclover.ant.tasks.CloverCleanTask"/>
    <taskdef name="clover-setup" classname="org.openclover.ant.tasks.CloverSetupTask"/>
    <taskdef name="clover-report" classname="org.openclover.ant.tasks.CloverReportTask"/>
    <taskdef name="clover-html-report" classname="org.openclover.ant.tasks.CloverHtmlReportTask"/>
    <taskdef name="clover-pdf-report" classname="org.openclover.ant.tasks.CloverPdfReportTask"/>
    <taskdef name="clover-historypoint" classname="org.openclover.ant.tasks.HistoryPointTask"/>
    <taskdef name="clover-check" classname="org.openclover.ant.tasks.CloverPassTask"/>
    <taskdef name="clover-merge" classname="org.openclover.ant.tasks.CloverMergeTask"/>

    <property name="clover.jar" location="${project.dir}/clover-all/target/clover-${clover-ant.test.clover.ver}.jar"/>
    <property name="junit.jar" location="${project.dir}/tests-functional/target/test-dependencies/junit-${clover-ant.test.junit.ver}.jar"/>
    <property name="test.resources.dir" location="${project.dir}/tests-functional/src/test/resources"/>
    <property name="test.resources.tasks.dir" location="${test.resources.dir}/org/openclover/functest/ant/tasks"/>

    <target name="setUp">
        <fail unless="project.dir" message="The 'project.dir' property is missing"/>
        <fail unless="outdir" message="The 'outdir' property is missing"/>
        <echo message="-----------------------------------"/>
    </target>

    <target name="tearDown">
    </target>

    <path id="unittestpath">
        <pathelement location="${junit.jar}"/>
        <pathelement location="${clover.jar}"/> <!-- normal version -->
        <pathelement location="${repkg.clover.jar}"/> <!-- repackaged version -->
    </path>

    <target name="with.clover" unless="no.setup">

        <echo message="****** Running Clover Clean"/>
        <clover-clean/>
        
        <echo message="****** Running Clover Setup - initstring is: ${clover.initstring}"/>
        <clover-setup>
            <methodContext name="simple" maxComplexity="3"/>
            <methodContext name="toString" regexp=".*toString.*"/>
            <methodContext name="addMoney" regexp=".*public IMoney addMoney\(Money m\)"/>
            <methodContext name="main" regexp="public static void main\(String args\[\]\).*"/>
        </clover-setup>        
    </target>

    <target name="cloverMoneyBags" depends="with.clover">

        <property name="src.dir" value="clover-core/src/test/resources/javasyntax1.3/moneybags"/>
        <property name="src.location" value="${src.dir}/src"/>

        <mkdir dir="${outdir}"/>
        <mkdir dir="${outdir}/classes"/>


        <echo message="****** Running Javac"/>
        <javac srcdir="${project.dir}/${src.location}" destdir="${outdir}/classes" debug="on">
            <classpath refid="unittestpath"/>
        </javac>

        <echo message="****** Running JUnit"/>
        <junit forkmode="once" dir="${outdir}">
            <classpath refid="unittestpath"/>
            <classpath>
                <pathelement location="${outdir}/classes"/>
            </classpath>

            <batchtest todir="${outdir}" fork="true">
                <fileset dir="${project.dir}/${src.location}" includes="**/*Test.java"/>
                <formatter type="xml"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>

    </target>

    <target name="testCloverCheck" depends="cloverMoneyBags">
        <clover-check target="87.75%" haltOnFailure="false" filter="${filter.spec}" failureProperty="check1.fail"/>
        <clover-check target="91.81%" haltOnFailure="true" failureProperty="check2.fail">
            <testsources dir="${project.dir}/${src.location}">
                <include name="**/*Test.java"/>
                <include name="**/Money.java"/>
            </testsources>
        </clover-check>
    </target>

    <target name="testMoneyBagHtmlReport" depends="cloverMoneyBags">
        <clover-report projectName="moneybags">
            <current outfile="${outdir}" title="Money Bags" homepage="testresults" numthreads="4" timeout="20s"
                     includeFailedTestCoverage="true">
                <format type="html" filter="static,toString,addMoney "/>
                <!--testresults dir="${outdir}" includes="TEST-*.xml"/-->
            </current>
            <current outfile="${outdir}/nosrc" maxtestsperfile="5" title="Money Bags - No source" numthreads="0"
                     homepage="testresults">
                <format type="html" srcLevel="false"/>
                <!--testresults dir="${outdir}" includes="TEST-*.xml"/-->
            </current>
            <current outfile="${outdir}/clover.xml" title="Money Bags - XML">
                <format type="xml"/>
            </current>
            <current outfile="${outdir}/clover.pdf" title="Money Bags - PDF" summary="true">
                <format type="pdf" srcLevel="false"/>
            </current>
            <current outfile="${outdir}/excludes" title="Money Bags - Exclude test" homepage="testresults">
                <fileset dir="${project.dir}/${src.location}">
                    <exclude name="**/*Bag.*"/>
                </fileset>
                <!--testresults dir="${outdir}" includes="TEST-*.xml"/-->
                <format type="html"/>
            </current>
        </clover-report>

        <loadfile property="pkg-summary-src" srcfile="${outdir}/pkg-summary.html"/>
        <property name="expected-pkg-summary-src" value="Package"/>

        <loadfile property="index-src" srcfile="${outdir}/index.html"/>
        <property name="expected-index-src" value="test-pkg-summary.html"/>

        <loadfile property="excludecontent" srcfile="${outdir}/excludes/moneybags/pkg-summary.html"/>

        <loadfile property="money-src" srcfile="${outdir}/moneybags/Money.html"/>
        <loadfile property="expected-money-src" srcfile="${test.resources.tasks.dir}/expected-money-src.txt"/>

        <property name="money-da-not-instrumented" value="${money-src}"/>
        <loadfile property="expected-money-da-not-instrumented" srcfile="${test.resources.tasks.dir}/expected-money-da-not-instrumented.txt"/>

        <loadresource property="linkified-stack-trace-src">
            <fileset dir="${outdir}/moneybags/">
              <include name="MoneyTest_testLinkificationInReport*.html"/>
            </fileset>
        </loadresource>
        <loadfile property="expected-linkified-stack-trace-src" srcfile="${test.resources.tasks.dir}/expected-linkified-stack-trace.txt"/>

        <condition property="excludes.success">
            <not>
                <contains string="$excludecontent" substring="Bag"/>
            </not>
        </condition>

        <clover-html-report outdir="${outdir}/canned" title="Money Bags Canned"
                            testresultsdir="${outdir}"
                            historydir="${outdir}/canned"
                            historyIncludes="**.gz"/>

        <condition property="canned.success">
            <and>
                <available file="${outdir}/canned/historical.html"/>
                <available file="${outdir}/canned/index.html"/>
            </and>
        </condition>

        <clover-report projectName="moneybags">
            <historical outfile="${outdir}/historical" title="Money Bags - History"
                        package="moneybags" historyDir="${outdir}/canned">
                <format type="html" filter="static,toString,addMoney "/>
            </historical>
        </clover-report>


        <condition property="historical.success">
            <and>
                <available file="${outdir}/historical/historical.html"/>
            </and>
        </condition>
        
    </target>


    <target name="testFilterSanityTest" depends="cloverMoneyBags"
            description="Tests HTML, XML and PDF reports with filters">
        
        <property name="filter.spec" value="if,toString"/>

        <clover-report projectName="moneybags">
            <current outfile="${outdir}" title="Money Bags" homepage="testresults">
                <format type="html" filter="${filter.spec}"/>
                <!--testresults dir="${outdir}" includes="TEST-*.xml"/-->
            </current>
            <current outfile="${outdir}/clover.xml" title="Money Bags - XML">
                <format type="xml" filter="${filter.spec}"/>
                <!--testresults dir="${outdir}" includes="TEST-*.xml"/-->
            </current>
            <current outfile="${outdir}/clover.pdf" title="Money Bags - PDF" summary="true">
                <format type="pdf" filter="${filter.spec}" srcLevel="false"/>
                <!--testresults dir="${outdir}" includes="TEST-*.xml"/-->
            </current>
        </clover-report>

        <clover-historypoint historydir="${outdir}"
                             filter="${filter.spec}"
                             includeFailedTestCoverage="false" 
                             property="clover.historypoint.path">
        </clover-historypoint>

        <gunzip dest="${outdir}/clover-filtered-historypoint.xml">
            <file file="${clover.historypoint.path}"/>
        </gunzip>


        <clover-historypoint historydir="${outdir}"
                             filter="${filter.spec}"
                             includeFailedTestCoverage="true" 
                             property="clover.historypoint.failed.coverage.included.path"
                             overwrite="true">
        </clover-historypoint>
      
        <gunzip dest="${outdir}/clover-failed-coverage-included-historypoint.xml">
            <file file="${clover.historypoint.failed.coverage.included.path}"/>
        </gunzip>


        <clover-check target="94.3%" haltOnFailure="true" filter="${filter.spec}">
            <package name="moneybags" target="94.3%"/>
        </clover-check>


        <loadfile property="filtered-money" srcfile="${outdir}/moneybags/Money.html"/>
        <loadfile property="expected-filtered-money" srcfile="${test.resources.tasks.dir}/expected-filtered-money.txt"/>

        <property name="filtered-xml-report" location="${outdir}/clover.xml"/>
        <property name="filtered-xml-historypoint" location="${outdir}/clover-filtered-historypoint.xml"/>
        <property name="filtered-xml-historypoint-failed-coverage-included" location="${outdir}/clover-failed-coverage-included-historypoint.xml"/>
        <property name="expected-filtered-xml-report" location="${test.resources.tasks.dir}/expected-filtered-xml-report.txt"/>
        <property name="expected-failed-coverage-included-historypoint" location="${test.resources.tasks.dir}/expected-failed-coverage-included-historypoint.txt"/>

        <condition property="filtered-pdf-report-exists">
            <available file="${outdir}/clover.pdf"/>
        </condition>

    </target>


    <target name="testJSONReport" depends="cloverMoneyBags">
        <clover-report>
            <current outfile="${outdir}/js">
                <format type="json" callback="processMyClover"/>
                <columns>
                    <coveredMethods/>
                    <coveredStatements/>
                    <coveredBranches/>
                    <coveredElements/>
                    <complexity/>
                </columns>
            </current>
            <current outfile="${outdir}/json">
                <format type="json" callback=""/> <!-- Test pure JSON too. -->
            </current>
        </clover-report>
        <loadfile property="moneybag.json" srcfile="${outdir}/js/moneybags/MoneyBag.java.js"/>

    </target>
    
    <target name="testCloverMergeSanityTest"
            description="A very high level sanity test for clover-merge">
        <mkdir dir="${outdir}"/>
        <clover-merge initstring="${outdir}/merged.db">
            <cloverdb initstring="${db1}"/>
            <cloverdb initstring="${db2}"/>
        </clover-merge>

        <property name="filter.spec" value="if,toString"/>
        <property name="testresults.dir" value="${outdir}/../merge-db1/"/>

        <clover-report projectName="merged-moneybags">
            <current outfile="${outdir}" includeFailedTestCoverage="false">
                <format type="html" filter="${filter.spec}"/>
                <!--testresults dir="${testresults.dir}" includes="TEST-*.xml"/-->
            </current>
        </clover-report>

        <condition property="merged.db.available">
            <available file="${outdir}/merged.db"/>
        </condition>

        <condition property="merged.report.available">
            <available file="${outdir}/index.html"/>    
        </condition>

    </target>

</project>