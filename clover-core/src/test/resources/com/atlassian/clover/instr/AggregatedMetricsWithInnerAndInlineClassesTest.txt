import java.util.Iterator;

/**
 * Top-level class:
 * statements = 1 (from myMethod(), we don't count inner classes)
 * aggregatedStatements = 15 (sum of direct methods' aggregated statements + direct inner classes aggregated statements)
 */
public class AggregatedMetrics {
    /**
     * Inner class, simple case with no nested classes
     * statements = aggregatedStatements = 3 (taken from methods)
	 * complexity = aggregatedComplexity = 2 (1 from each method)
     */
    class B {
        void methodOne() {
            int a = 1;
            int b = 2;
        }

        void methodTwo() {
            int c = 3;
        }
    }

    /**
     * Inner class, case with a method having an inline anonymous class
     * statements = 5 (sum from direct methods and anonymous class methods)
     * aggregatedStatements = 5 (sum of direct methods' aggregated statements)
	 * aggregatedComplexity = 5
     */
    class C {
        /**
         * Method: statements = 2; aggregatedStatements = 4 (method's statements + inline class aggregated statements)
		 * aggregatedComplexity = 4 (1 from each of methodThree(), hasNext(), next(), remove())
         */
        Iterator methodThree() {
            int d = 4;
            /**
             * Inline class: statements = aggregatedStatements = 2 (sum of its methods)
             * NOTE: Clover does not have ClassInfo objects for anonymous classes! CLOV-1192
             */
            return new AggregatedComplexityTest() {
                /** statements = aggregatedStatements = 1 */
                public boolean hasNext() {
                    return false;
                }

                /** statements = aggregatedStatements = 1 */
                public Object next() {
                    return null;
                }

                /** statements = aggregatedStatements = 0 */
                public void remove() {

                }
            };
        }

        /** statements = aggregatedStatements = 1 */
        void methodFour() {
            int e = 5;
        }
    }

    /**
     * Inner class having doubly-nested inline classes.
     * statements = 6 (sum from direct methods and anonymous classes)
     * aggregatedStatements = 6 (from it's direct method aggregatedStatements)
	 * aggregatedComplexity = 7
     */
    class E {
        /** Method: statements = 2, aggregatedStatements = 6 */
        Iterator<Iterator> methodFive() {
            int f = 6;
            /**
             * Inline class: statements = 2, aggregatedStatements = 4
             * NOTE: Clover does not have ClassInfo objects for anonymous classes! CLOV-1192
             */
            return new Iterator<Iterator>() {
                /** remove() method: statements = aggregatedStatements = 1 */
                public boolean hasNext() {
                    return true;
                }
                /** next() method: statements 1; aggregatedStatements = 3 */
                public Iterator next() {
                    /** Inline class: statements = 2; aggregatedStatements = 2; */
                    return new Iterator() {
                        public boolean hasNext() {
                            return false;
                        }

                        public Object next() {
                            return null;
                        }

                        public void remove() {

                        }
                    };
                }

                /** remove() method: statements = aggregatedStatements = 0 */
                public void remove() {

                }
            };
        }
    }

    /** statements = aggregatedStatements = 1, complexity = 1 */
    void myMethod() {
        int zero = 0;
    }
}


/**
 * Top-level class:
 * statements = aggregatedStatements = 5
 * complexity = aggregatedComplexity = 7
 */
class AggregatedComplexityTest implements Iterator {
	int i = 1;
		
    /* statement = 4, complexity = 4 (3 from boolean expression + 1 from method itself) */
    public boolean hasNext() {
		// branch in "if"
		int i = 1, j = 4;
        if ((i == 2) && (j != 5) && (true != false)) {
			return true;
		} else {
			return false;
		}
    }

    /** statement = 1, complexity = 2 (1 from method + 1 from ternary operator) */
    public Object next() {
		// branch in ternary operator
        return (i == 2 ? 10 : 20);
    }

    /** statement = 0, complexity = 1 (from method itself) */
    public void remove() {

    }
}