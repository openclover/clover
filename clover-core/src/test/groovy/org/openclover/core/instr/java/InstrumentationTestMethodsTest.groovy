package org.openclover.core.instr.java

import org.junit.Test
import org.openclover.runtime.CloverNames

class InstrumentationTestMethodsTest extends InstrumentationTestBase {

    @Test
    void testTestMethod() throws Exception {
        checkInstrumentation([
                [ "public class MyTest { @Test public Class<? extends Throwable> foo(){} }",
                  "public class MyTest {$testClassField$snifferField @Test public Class<? extends Throwable> foo(){" + "RECORDER.R.globalSliceStart(getClass().getName(),0);int "+ CloverNames.namespace("p")+"=0;java.lang.Throwable "+ CloverNames.namespace("t")+"=null;try{Class<? extends Throwable> "+ CloverNames.namespace("r")+"=RECORDER();"+ CloverNames.namespace("p")+"=1;return "+ CloverNames.namespace("r")+";}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");return null;}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTest.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private Class<? extends Throwable>  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTest { @Test public static Class<? extends Throwable> foo(){} }",
                  "public class MyTest {$testClassField$snifferField @Test public static Class<? extends Throwable> foo(){RECORDER.R.globalSliceStart(MyTest.class.getName(),0);int "+ CloverNames.namespace("p")+"=0;java.lang.Throwable "+ CloverNames.namespace("t")+"=null;try{Class<? extends Throwable> "+ CloverNames.namespace("r")+"=RECORDER();"+ CloverNames.namespace("p")+"=1;return "+ CloverNames.namespace("r")+";}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");return null;}finally{RECORDER.R.globalSliceEnd(MyTest.class.getName(),\"MyTest.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private static Class<? extends Throwable>  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTest { @Test public Class<? extends Throwable> foo(int a, boolean b){} }",
                  "public class MyTest {$testClassField$snifferField @Test public Class<? extends Throwable> foo(int a, boolean b){RECORDER.R.globalSliceStart(getClass().getName(),0);int "+ CloverNames.namespace("p")+"=0;java.lang.Throwable "+ CloverNames.namespace("t")+"=null;try{Class<? extends Throwable> "+ CloverNames.namespace("r")+"=RECORDER(a,b);"+ CloverNames.namespace("p")+"=1;return "+ CloverNames.namespace("r")+";}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");return null;}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTest.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private Class<? extends Throwable>  RECORDER(int a, boolean b){RECORDER.R.inc(0);} }" ],

                [ "public class MyTest { @Test public Class<? extends Throwable> foo(int a[], boolean b){} }",
                  "public class MyTest {$testClassField$snifferField @Test public Class<? extends Throwable> foo(int a[], boolean b){RECORDER.R.globalSliceStart(getClass().getName(),0);int "+ CloverNames.namespace("p")+"=0;java.lang.Throwable "+ CloverNames.namespace("t")+"=null;try{Class<? extends Throwable> "+ CloverNames.namespace("r")+"=RECORDER(a,b);"+ CloverNames.namespace("p")+"=1;return "+ CloverNames.namespace("r")+";}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");return null;}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTest.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private Class<? extends Throwable>  RECORDER(int a[], boolean b){RECORDER.R.inc(0);} }" ],

                [ "public class MyTest { @Test public <T> Class<T> foo(int a[], boolean b){} }",
                  "public class MyTest {$testClassField$snifferField @Test public <T> Class<T> foo(int a[], boolean b){RECORDER.R.globalSliceStart(getClass().getName(),0);int "+ CloverNames.namespace("p")+"=0;java.lang.Throwable "+ CloverNames.namespace("t")+"=null;try{Class<T> "+ CloverNames.namespace("r")+"=RECORDER(a,b);"+ CloverNames.namespace("p")+"=1;return "+ CloverNames.namespace("r")+";}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");return null;}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTest.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private <T> Class<T>  RECORDER(int a[], boolean b){RECORDER.R.inc(0);} }" ],

                [ "public class MyTest { @Test public <T extends Serializable> T foo(int a[], boolean b){} }",
                  "public class MyTest {$testClassField$snifferField @Test public <T extends Serializable> T foo(int a[], boolean b){RECORDER.R.globalSliceStart(getClass().getName(),0);int "+ CloverNames.namespace("p")+"=0;java.lang.Throwable "+ CloverNames.namespace("t")+"=null;try{T "+ CloverNames.namespace("r")+"=RECORDER(a,b);"+ CloverNames.namespace("p")+"=1;return "+ CloverNames.namespace("r")+";}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");return null;}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTest.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private <T extends Serializable> T  RECORDER(int a[], boolean b){RECORDER.R.inc(0);} }" ],
        ] as String[][])
    }

    @Test
    void testTestMethodWithNoRewrite() throws Exception {
        checkInstrumentation([
                ["public class MyTest { @Test public void testFoo(){} }",
                 "public class MyTest {$testClassField$snifferField @Test public void testFoo(){try{RECORDER.R.globalSliceStart(getClass().getName(),0);RECORDER.R.inc(0);}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTest.testFoo\",SNIFFER.getTestName(),0);}} }" ],

                ["public class MyTest { @Test public static void testFoo(){} }",
                 "public class MyTest {$testClassField$snifferField @Test public static void testFoo(){try{RECORDER.R.globalSliceStart(MyTest.class.getName(),0);RECORDER.R.inc(0);}finally{RECORDER.R.globalSliceEnd(MyTest.class.getName(),\"MyTest.testFoo\",SNIFFER.getTestName(),0);}} }"]
        ] as String[][], false)
    }

    @Test
    void testExpectedExceptions() throws Exception {
        checkInstrumentation([
                [ "public class MyTestA { @Test public void foo(){} }",
                  "public class MyTestA {$testClassField$snifferField @Test public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestA.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestB { /** @testng.test */public void foo(){} }",
                  "public class MyTestB {$testClassField$snifferField /** @testng.test */public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestB.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestC { @Test(expectedExceptions={}) public void foo(){} }",
                  "public class MyTestC {$testClassField$snifferField @Test(expectedExceptions={}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestC.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestD { /** @testng.test expectedExceptions=\"\" */public void foo(){} }",
                  "public class MyTestD {$testClassField$snifferField /** @testng.test expectedExceptions=\"\" */public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestD.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestE { @org.testng.annotations.Test(expectedExceptions={}) public void foo(){} }",
                  "public class MyTestE {$testClassField$snifferField @org.testng.annotations.Test(expectedExceptions={}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestE.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestF { @Test(expected={}) public void foo(){} }",
                  "public class MyTestF {$testClassField$snifferField @Test(expected={}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestF.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestG { @org.junit.Test(expected={}) public void foo(){} }",
                  "public class MyTestG {$testClassField$snifferField @org.junit.Test(expected={}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestG.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestH { @Test @ExpectedExceptions({}) public void foo(){} }",
                  "public class MyTestH {$testClassField$snifferField @Test @ExpectedExceptions({}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestH.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestI { /** @testng.test\n* @testng.expected-exceptions value=\"\" */\npublic void foo(){} }",
                  "public class MyTestI {$testClassField$snifferField /** @testng.test\n* @testng.expected-exceptions value=\"\" */\npublic void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestI.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestJ { @Test @org.testng.annotations.ExpectedExceptions({}) public void foo(){} }",
                  "public class MyTestJ {$testClassField$snifferField @Test @org.testng.annotations.ExpectedExceptions({}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestJ.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestK { @org.testng.annotations.Test(expectedExceptions={Foo.class,Bar.class}) public void foo(){} }",
                  "public class MyTestK {$testClassField$snifferField @org.testng.annotations.Test(expectedExceptions={Foo.class,Bar.class}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"=new java.lang.RuntimeException(new String(new char[] {69,120,112,101,99,116,101,100,32,111,110,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,101,120,99,101,112,116,105,111,110,115,32,116,111,32,98,101,32,116,104,114,111,119,110,32,102,114,111,109,32,116,101,115,116,32,109,101,116,104,111,100,32,102,111,111,58,32,91,66,97,114,44,32,70,111,111,93,}));}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("t2")+" instanceof Bar||"+ CloverNames.namespace("t2")+" instanceof Foo){"+ CloverNames.namespace("p")+"=1;" + CloverNames.namespace("t") + "=null;}else{"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestK.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestL { /** @testng.test expectedExceptions = \"Foo Bar\" */public void foo(){} }",
                  "public class MyTestL {$testClassField$snifferField /** @testng.test expectedExceptions = \"Foo Bar\" */public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"=new java.lang.RuntimeException(new String(new char[] {69,120,112,101,99,116,101,100,32,111,110,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,101,120,99,101,112,116,105,111,110,115,32,116,111,32,98,101,32,116,104,114,111,119,110,32,102,114,111,109,32,116,101,115,116,32,109,101,116,104,111,100,32,102,111,111,58,32,91,66,97,114,44,32,70,111,111,93,}));}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("t2")+" instanceof Bar||"+ CloverNames.namespace("t2")+" instanceof Foo){"+ CloverNames.namespace("p")+"=1;" + CloverNames.namespace("t") + "=null;}else{"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestL.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestM { @Test @ExpectedExceptions({Foo.class,Bar.class}) public void foo(){} }",
                  "public class MyTestM {$testClassField$snifferField @Test @ExpectedExceptions({Foo.class,Bar.class}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"=new java.lang.RuntimeException(new String(new char[] {69,120,112,101,99,116,101,100,32,111,110,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,101,120,99,101,112,116,105,111,110,115,32,116,111,32,98,101,32,116,104,114,111,119,110,32,102,114,111,109,32,116,101,115,116,32,109,101,116,104,111,100,32,102,111,111,58,32,91,66,97,114,44,32,70,111,111,93,}));}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("t2")+" instanceof Bar||"+ CloverNames.namespace("t2")+" instanceof Foo){"+ CloverNames.namespace("p")+"=1;" + CloverNames.namespace("t") + "=null;}else{"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestM.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestN { @org.testng.annotations.Test @org.testng.annotations.ExpectedExceptions({Foo.class,Bar.class}) public void foo(){} }",
                  "public class MyTestN {$testClassField$snifferField @org.testng.annotations.Test @org.testng.annotations.ExpectedExceptions({Foo.class,Bar.class}) public void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"=new java.lang.RuntimeException(new String(new char[] {69,120,112,101,99,116,101,100,32,111,110,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,101,120,99,101,112,116,105,111,110,115,32,116,111,32,98,101,32,116,104,114,111,119,110,32,102,114,111,109,32,116,101,115,116,32,109,101,116,104,111,100,32,102,111,111,58,32,91,66,97,114,44,32,70,111,111,93,}));}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("t2")+" instanceof Bar||"+ CloverNames.namespace("t2")+" instanceof Foo){"+ CloverNames.namespace("p")+"=1;" + CloverNames.namespace("t") + "=null;}else{"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestN.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestO { /** @testng.test\n * @testng.expected-exceptions value = \"Foo Bar\"\n*/\npublic void foo(){} }",
                  "public class MyTestO {$testClassField$snifferField /** @testng.test\n * @testng.expected-exceptions value = \"Foo Bar\"\n*/\npublic void foo(){RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"=new java.lang.RuntimeException(new String(new char[] {69,120,112,101,99,116,101,100,32,111,110,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,101,120,99,101,112,116,105,111,110,115,32,116,111,32,98,101,32,116,104,114,111,119,110,32,102,114,111,109,32,116,101,115,116,32,109,101,116,104,111,100,32,102,111,111,58,32,91,66,97,114,44,32,70,111,111,93,}));}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("t2")+" instanceof Bar||"+ CloverNames.namespace("t2")+" instanceof Foo){"+ CloverNames.namespace("p")+"=1;" + CloverNames.namespace("t") + "=null;}else{"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestO.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.R.inc(0);} }" ],

                [ "public class MyTestP { @Test(expected=Foo.class) public void foo() throws Foo, Bar {} }",
                  "public class MyTestP {$testClassField$snifferField @Test(expected=Foo.class) public void foo() throws Foo, Bar {RECORDER.R.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"=new java.lang.RuntimeException(new String(new char[] {69,120,112,101,99,116,101,100,32,111,110,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,101,120,99,101,112,116,105,111,110,115,32,116,111,32,98,101,32,116,104,114,111,119,110,32,102,114,111,109,32,116,101,115,116,32,109,101,116,104,111,100,32,102,111,111,58,32,91,70,111,111,93,}));}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("t2")+" instanceof Foo){"+ CloverNames.namespace("p")+"=1;" + CloverNames.namespace("t") + "=null;}else{"+ CloverNames.namespace("p")+"=0;"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.R.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.R.globalSliceEnd(getClass().getName(),\"MyTestP.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER() throws Foo, Bar{RECORDER.R.inc(0);} }" ],
        ] as String[][])
    }
}
