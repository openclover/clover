package com.atlassian.clover.instr.java

import org.openclover.runtime.CloverNames
import org.junit.Test

class InstrumentationLambdasTest extends InstrumentationTestBase {

    @Test
    void testLambdaExprToBlockReplace() throws Exception {
        checkInstrumentation([
                [ "public class MyTestA { @Test public void foo(){Stream.of(1, 2, 3, 4, 5, 6).map((i) -> \"String:\" + String.valueOf(i));} }",
                  "public class MyTestA {" + snifferField + " @Test public void foo(){RECORDER.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.globalSliceEnd(getClass().getName(),\"MyTestA.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.inc(0);RECORDER.inc(1);Stream.of(1, 2, 3, 4, 5, 6).map((i) -> {RECORDER.inc(2);return \"String:\" + String.valueOf(i);});} }" ],
                [ "public class MyTestA { @Test public void foo(){map((int i) -> /*CLOVER:VOID*/ System.out.println(i));} }",
                  "public class MyTestA {" + snifferField + " @Test public void foo(){RECORDER.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.globalSliceEnd(getClass().getName(),\"MyTestA.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.inc(0);RECORDER.inc(1);map((int i) -> /*CLOVER:VOID*/ {RECORDER.inc(2);System.out.println(i);});} }" ],
                [ "public class MyTestA { @Test public void foo(){ map((i) -> /** CLOVER:VOID */ System.out.println(\"String:\" + String.valueOf(i))); }}",
                  "public class MyTestA {" + snifferField + " @Test public void foo(){RECORDER.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.globalSliceEnd(getClass().getName(),\"MyTestA.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.inc(0); RECORDER.inc(1);map((i) -> /** CLOVER:VOID */ {RECORDER.inc(2);System.out.println(\"String:\" + String.valueOf(i));}); }}" ],
                [ "public class MyTestA { @Test public void foo(){ map((i) -> /*                       \t\n\r CLOVER:VOID */ System.out.println(\"String:\" + String.valueOf(i))); }}",
                  "public class MyTestA {" + snifferField + " @Test public void foo(){RECORDER.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.globalSliceEnd(getClass().getName(),\"MyTestA.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.inc(0); RECORDER.inc(1);map((i) -> /*                       \t\n\r CLOVER:VOID */ {RECORDER.inc(2);System.out.println(\"String:\" + String.valueOf(i));}); }}" ],
                [ "public class MyTestA { @Test public void foo(){ map((i) -> ///CLOVER:VOID\n System.out.println(\"String:\" + String.valueOf(i))); }}",
                  "public class MyTestA {" + snifferField + " @Test public void foo(){RECORDER.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.globalSliceEnd(getClass().getName(),\"MyTestA.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.inc(0); RECORDER.inc(1);map((i) -> ///CLOVER:VOID\n {RECORDER.inc(2);System.out.println(\"String:\" + String.valueOf(i));}); }}" ],
                [ "public class MyTestA { @Test public void foo(){ map((i) -> // /CLOVER:VOID\n System.out.println(\"String:\" + String.valueOf(i))); }}",
                  "public class MyTestA {" + snifferField + " @Test public void foo(){RECORDER.globalSliceStart(getClass().getName(),0);int " + CloverNames.namespace("p") + "=0;java.lang.Throwable " + CloverNames.namespace("t") + "=null;try{RECORDER();"+ CloverNames.namespace("p")+"=1;}catch(java.lang.Throwable "+ CloverNames.namespace("t2")+"){if("+ CloverNames.namespace("p")+"==0&&"+ CloverNames.namespace("t")+"==null){"+ CloverNames.namespace("t")+"="+ CloverNames.namespace("t2")+";}RECORDER.rethrow("+ CloverNames.namespace("t2")+");}finally{RECORDER.globalSliceEnd(getClass().getName(),\"MyTestA.foo\",SNIFFER.getTestName(),0,"+ CloverNames.namespace("p")+","+ CloverNames.namespace("t")+");}}private void  RECORDER(){RECORDER.inc(0); RECORDER.inc(1);map((i) -> // /CLOVER:VOID\n {RECORDER.inc(2);System.out.println(\"String:\" + String.valueOf(i));}); }}" ],
        ] as String[][])
    }

}
