package org.openclover.core.api.registry;

import org.jetbrains.annotations.NotNull;

import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Set;

/**
 * Represents a single class or it's equivalent (an interface, trait etc).
 * <p/>
 * Implemented interfaces:
 * <ul>
 *     <li>SourceInfo - represents content of the whole class</li>
 *     <li>HasClasses, HasMethods, HasStatements - code entities which can be declared inside a class
 *     (on the lop level)</li>
 *     <li>HasContextFilter - set of custom statement/method contexts for filtering</li>
 *     <li>HasMetrics, HasAggregatedMetrics - code metrics for the class</li>
 *     <li>HasParent - parent class/method/file for this class</li>
 * </ul>
 */
public interface ClassInfo extends
        SourceInfo, EntityContainer, EntityEnclosure, HasClassMetadata,
        HasClasses, HasMethods, HasStatements,
        HasContextFilter, HasMetrics, HasAggregatedMetrics, HasParent, FileInfoRegion,
        IsVisitable {

    /**
     * Create a copy of this class, setting a file as a parent.
     */
    ClassInfo copy(FileInfo newParent, HasMetricsFilter filter);

    /**
     * Collect all source regions inside this class - the class itself
     * and all methods inside (recursively).
     */
    void gatherSourceRegions(Set<SourceInfo> regions);

    @Override
    String getName();

    String getQualifiedName();

    ModifiersInfo getModifiers();

    /**
     * Returns list of inner classes declared on the top level of the class. It does not return classes declared inside
     * other inner classes, i.e nested more than one level. Exact content depends on a programming language, e.g.:
     *
     * <ul>
     *     <li>Java and Groovy - it does not return anonymous inline classes (they're treated like statements)</li>
     *     <li>Scala - t.b.d. </li>
     * </ul>
     *
     * @return List&lt;ClassInfo&gt; - list of classes or empty list if none
     */
    @Override
    @NotNull
    List<ClassInfo> getClasses();

    /**
     * Returns list of methods declared on the top level of the class. It does not return methods declared in nested
     * classes or methods declared inside other methods etc. Exact content depends on a programming language, e.g.:
     *
     * <ul>
     *     <li>Java - traditional methods plus lambda functions assigned to a field (java 8 or above)</li>
     *     <li>Groovy - methods, extra methods generated by groovyc (getters and setters for instance)</li>
     *     <li>Scala - t.b.d. </li>
     * </ul>
     *
     * @return List&lt;MethodInfo&gt; - list of methods or empty list if none
     */
    @Override
    @NotNull
    List<MethodInfo> getMethods();

    PackageInfo getPackage();

    /**
     * Returns list of statements declared on the to level of the class, i.e. outside methods. It does not apply to all
     * programming languages:
     * <ul>
     *     <li>Java - not applicable, code put in static initializer blocks is treated as a part of a constructor</li>
     *     <li>Groovy - not applicable</li>
     *     <li>Scala - t.b.d.</li>
     * </ul>
     *
     * @return List&lt;StatementInfo&gt; - list of statements or empty list if none
     */
    @Override
    @NotNull
    List<StatementInfo> getStatements();

    void addClass(ClassInfo classInfo);

    /**
     * Returns test cases found for this class.
     */
    Collection<TestCaseInfo> getTestCases();

    boolean isAnnotationType();

    /**
     * Returns true if this class does not contain any nested entities (method or inner classes)
     *
     * @return boolean - true if getMethods() is empty and getClasses() is empty
     */
    boolean isEmpty();

    /**
     * Returns true if the class is an interface.
     */
    boolean isInterface();

    /**
     * Returns true if the class in an enum.
     */
    boolean isEnum();

    /**
     * Whether this is a test class (according to custom or default test detector).
     */
    boolean isTestClass();

    void setComparator(Comparator<HasMetrics> cmp);

    void setDataProvider(final CoverageDataProvider data);

}
